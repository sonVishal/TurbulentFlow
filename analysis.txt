Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 58.34      2.38     2.38  3832290     0.00     0.00  FGHStencil::apply(FlowField&, int, int, int)
  7.11      2.67     0.29  3832290     0.00     0.00  RHSStencil::apply(FlowField&, int, int, int)
  6.99      2.96     0.29 168690310     0.00     0.00  VectorField::getVector(int, int, int)
  4.41      3.14     0.18  3832290     0.00     0.00  VelocityStencil::apply(FlowField&, int, int, int)
  4.17      3.31     0.17                             computeMatrix3D(_p_KSP*, _p_Mat*, _p_Mat*, void*)
  3.92      3.47     0.16 130073656     0.00     0.00  UniformMeshsize::getDy(int, int, int) const
  3.19      3.60     0.13 130073650     0.00     0.00  UniformMeshsize::getDx(int, int, int) const
  1.96      3.68     0.08 39921860     0.00     0.00  FlowField::getFGH()
  1.47      3.74     0.06 130073650     0.00     0.00  UniformMeshsize::getDz(int, int, int) const
  0.98      3.78     0.04 22994530     0.00     0.00  FlowField::getPressure()
  0.86      3.81     0.04 34622350     0.00     0.00  ScalarField::getScalar(int, int, int)
  0.74      3.84     0.03 124744160     0.00     0.00  FlowField::getVelocity()
  0.74      3.87     0.03 11546451     0.00     0.00  FlowField::getFlags()
  0.74      3.90     0.03                             UniformMeshsize::getDy(int, int) const
  0.61      3.93     0.03        2     0.01     0.01  VectorField::VectorField(int, int, int)
  0.37      3.94     0.02 17868870     0.00     0.00  IntScalarField::getValue(int, int, int)
  0.37      3.96     0.02        2     0.01     0.01  ScalarField::ScalarField(int, int, int)
  0.25      3.97     0.01  5612950     0.00     0.00  MaxUStencil::apply(FlowField&, int, int, int)
  0.25      3.98     0.01  3832290     0.00     0.00  ObstacleStencil::apply(FlowField&, int, int, int)
  0.25      3.99     0.01  2662312     0.00     0.00  FlowField::getCellsY() const
  0.25      4.00     0.01   878492     0.00     0.00  FlowField::getCellsX() const
  0.25      4.01     0.01   382360     0.00     0.00  MovingWallVelocityStencil::applyBottomWall(FlowField&, int, int, int)
  0.25      4.02     0.01   208560     0.00     0.00  MovingWallVelocityStencil::applyFrontWall(FlowField&, int, int, int)
  0.25      4.03     0.01   208560     0.00     0.00  MovingWallVelocityStencil::applyRightWall(FlowField&, int, int, int)
  0.25      4.04     0.01       12     0.00     0.00  VTKStencil::writeHeaderAndCoords()
  0.25      4.05     0.01        2     0.01     1.84  FieldIterator<FlowField>::iterate()
  0.25      4.06     0.01                             computeRHS3D(_p_KSP*, _p_Vec*, void*)
  0.25      4.07     0.01                             PetscSolver::solve()
  0.25      4.08     0.01                             VelocityStencil::apply(FlowField&, int, int)
  0.12      4.08     0.01                             IntScalarField::initialize()
  0.00      4.08     0.00  4493532     0.00     0.00  FlowField::getCellsZ() const
  0.00      4.08     0.00  3833080     0.00     0.00  FlowField::getRHS()
  0.00      4.08     0.00   382360     0.00     0.00  MovingWallFGHStencil::applyTopWall(FlowField&, int, int, int)
  0.00      4.08     0.00   382360     0.00     0.00  MovingWallFGHStencil::applyBottomWall(FlowField&, int, int, int)
  0.00      4.08     0.00   382360     0.00     0.00  MovingWallVelocityStencil::applyTopWall(FlowField&, int, int, int)
  0.00      4.08     0.00   208560     0.00     0.00  MovingWallFGHStencil::applyBackWall(FlowField&, int, int, int)
  0.00      4.08     0.00   208560     0.00     0.00  MovingWallFGHStencil::applyLeftWall(FlowField&, int, int, int)
  0.00      4.08     0.00   208560     0.00     0.00  MovingWallFGHStencil::applyFrontWall(FlowField&, int, int, int)
  0.00      4.08     0.00   208560     0.00     0.00  MovingWallFGHStencil::applyRightWall(FlowField&, int, int, int)
  0.00      4.08     0.00   208560     0.00     0.00  MovingWallVelocityStencil::applyBackWall(FlowField&, int, int, int)
  0.00      4.08     0.00   208560     0.00     0.00  MovingWallVelocityStencil::applyLeftWall(FlowField&, int, int, int)
  0.00      4.08     0.00    58212     0.00     0.00  VTKStencil::apply(FlowField&, int, int, int)
  0.00      4.08     0.00    58212     0.00     0.00  UniformMeshsize::getPosX(int, int, int) const
  0.00      4.08     0.00    48000     0.00     0.00  FlowField::getPressureAndVelocity(double&, double*, int, int, int)
  0.00      4.08     0.00     2775     0.00     0.00  UniformMeshsize::getPosY(int, int, int) const
  0.00      4.08     0.00      299     0.00     0.00  tinyxml2::StrPair::GetStr()
  0.00      4.08     0.00      252     0.00     0.00  UniformMeshsize::getPosZ(int, int, int) const
  0.00      4.08     0.00      220     0.00     0.00  tinyxml2::XMLElement::ToElement()
  0.00      4.08     0.00       78     0.00     0.00  tinyxml2::StrPair::ParseName(char*)
  0.00      4.08     0.00       46     0.00     0.00  tinyxml2::XMLDocument::Identify(char*, tinyxml2::XMLNode**)
  0.00      4.08     0.00       44     0.00     0.00  tinyxml2::XMLNode::FirstChildElement(char const*) const
  0.00      4.08     0.00       40     0.00     0.00  tinyxml2::XMLElement::ParseAttributes(char*)
  0.00      4.08     0.00       40     0.00     0.00  tinyxml2::XMLElement::ParseDeep(char*, tinyxml2::StrPair*)
  0.00      4.08     0.00       40     0.00     0.00  tinyxml2::XMLElement::~XMLElement()
  0.00      4.08     0.00       40     0.00     0.00  tinyxml2::MemPoolT<104>::SetTracked()
  0.00      4.08     0.00       40     0.00     0.00  tinyxml2::MemPoolT<104>::Free(void*)
  0.00      4.08     0.00       39     0.00     0.00  tinyxml2::XMLElement::FindAttribute(char const*) const
  0.00      4.08     0.00       38     0.00     0.00  tinyxml2::XMLAttribute::ParseDeep(char*, bool)
  0.00      4.08     0.00       38     0.00     0.00  tinyxml2::MemPoolT<72>::Free(void*)
  0.00      4.08     0.00       31     0.00     0.00  tinyxml2::XMLAttribute::QueryDoubleValue(double*) const
  0.00      4.08     0.00       22     0.00     0.00  tinyxml2::XMLNode::ToElement()
  0.00      4.08     0.00       17     0.00     0.00  tinyxml2::XMLNode::~XMLNode()
  0.00      4.08     0.00       16     0.00     0.00  tinyxml2::XMLText::ToText() const
  0.00      4.08     0.00        8     0.00     0.00  tinyxml2::XMLElement::GetText() const
  0.00      4.08     0.00        7     0.00     0.00  tinyxml2::XMLAttribute::QueryIntValue(int*) const
  0.00      4.08     0.00        6     0.00     0.00  readWall(tinyxml2::XMLElement*, double*, double&)
  0.00      4.08     0.00        4     0.00     0.00  readStringMandatory(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, tinyxml2::XMLElement*)
  0.00      4.08     0.00        4     0.00     0.00  tinyxml2::XMLText::ParseDeep(char*, tinyxml2::StrPair*)
  0.00      4.08     0.00        4     0.00     0.00  tinyxml2::XMLText::~XMLText()
  0.00      4.08     0.00        4     0.00     0.00  tinyxml2::MemPoolT<96>::SetTracked()
  0.00      4.08     0.00        4     0.00     0.00  tinyxml2::MemPoolT<96>::Free(void*)
  0.00      4.08     0.00        3     0.00     0.00  broadcastString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ompi_communicator_t* const&, int)
  0.00      4.08     0.00        2     0.00     0.00  VTKStencil::openFile(int)
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z12createLimitsR10ParametersRP5_p_DMPiS4_S4_
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z14timeDifferenceRK7timevalS1_
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z17computeVelocity3DR9FlowFieldiiidRK10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__Z18readFloatMandatoryRdPN8tinyxml210XMLElementEPKc
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN10FGHStencilC2ERK10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN10RHSStencilC2ERK10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN10VTKStencilC2ERK10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN11MaxUStencilC2ERK10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN11ScalarFieldC2Eii
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN12LinearSolverC2ER9FlowFieldRK10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN15ObstacleStencilC2ERK10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN15UniformMeshsizeC2ERK10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN15VelocityStencilC2ERK10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN17BFStepInitStencilC2ERK10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN21GlobalBoundaryFactoryC2ER10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN25MovingWallVelocityStencilC2ERK10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN26PetscParallelConfigurationC2ER10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN30NeumannVelocityBoundaryStencilC2ERK10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN31PeriodicBoundaryVelocityStencilC2ERK10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN9FlowFieldC2Eii
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN9SORSolverC2ER9FlowFieldRK10Parameters
  0.00      4.08     0.00        1     0.00     0.00  _GLOBAL__sub_I_main
  0.00      4.08     0.00        1     0.00     0.00  createLimits(Parameters&, _p_DM*&, int*, int*, int*)
  0.00      4.08     0.00        1     0.00     0.00  PetscSolver::reInitMatrix()
  0.00      4.08     0.00        1     0.00     0.00  LinearSolver::LinearSolver(FlowField&, Parameters const&)
  0.00      4.08     0.00        1     0.00     0.00  IntScalarField::IntScalarField(int, int, int)
  0.00      4.08     0.00        1     0.00     0.00  UniformMeshsize::UniformMeshsize(Parameters const&)
  0.00      4.08     0.00        1     0.00     0.00  UniformMeshsize::~UniformMeshsize()
  0.00      4.08     0.00        1     0.00     0.00  BFInputFGHStencil::BFInputFGHStencil(Parameters const&)
  0.00      4.08     0.00        1     0.00     0.00  BFInputFGHStencil::~BFInputFGHStencil()
  0.00      4.08     0.00        1     0.00     0.00  MovingWallFGHStencil::MovingWallFGHStencil(Parameters const&)
  0.00      4.08     0.00        1     0.00     0.00  MovingWallFGHStencil::~MovingWallFGHStencil()
  0.00      4.08     0.00        1     0.00     0.00  GlobalBoundaryFactory::~GlobalBoundaryFactory()
  0.00      4.08     0.00        1     0.00     0.00  BFInputVelocityStencil::BFInputVelocityStencil(Parameters const&)
  0.00      4.08     0.00        1     0.00     0.00  BFInputVelocityStencil::~BFInputVelocityStencil()
  0.00      4.08     0.00        1     0.00     0.00  MovingWallVelocityStencil::MovingWallVelocityStencil(Parameters const&)
  0.00      4.08     0.00        1     0.00     0.00  MovingWallVelocityStencil::~MovingWallVelocityStencil()
  0.00      4.08     0.00        1     0.00     0.00  NeumannFGHBoundaryStencil::NeumannFGHBoundaryStencil(Parameters const&)
  0.00      4.08     0.00        1     0.00     0.00  NeumannFGHBoundaryStencil::~NeumannFGHBoundaryStencil()
  0.00      4.08     0.00        1     0.00     0.00  PeriodicBoundaryFGHStencil::PeriodicBoundaryFGHStencil(Parameters const&)
  0.00      4.08     0.00        1     0.00     0.00  PeriodicBoundaryFGHStencil::~PeriodicBoundaryFGHStencil()
  0.00      4.08     0.00        1     0.00     0.00  PetscParallelConfiguration::computeSizes()
  0.00      4.08     0.00        1     0.00     0.00  PetscParallelConfiguration::locateNeighbors()
  0.00      4.08     0.00        1     0.00     0.00  NeumannVelocityBoundaryStencil::NeumannVelocityBoundaryStencil(Parameters const&)
  0.00      4.08     0.00        1     0.00     0.00  NeumannVelocityBoundaryStencil::~NeumannVelocityBoundaryStencil()
  0.00      4.08     0.00        1     0.00     0.00  PeriodicBoundaryVelocityStencil::PeriodicBoundaryVelocityStencil(Parameters const&)
  0.00      4.08     0.00        1     0.00     0.00  PeriodicBoundaryVelocityStencil::~PeriodicBoundaryVelocityStencil()
  0.00      4.08     0.00        1     0.00     0.00  tinyxml2::XMLDocument::LoadFile(_IO_FILE*)
  0.00      4.08     0.00        1     0.00     0.00  tinyxml2::XMLDocument::LoadFile(char const*)
  0.00      4.08     0.00        1     0.00     0.00  tinyxml2::XMLDocument::XMLDocument(bool, tinyxml2::Whitespace)
  0.00      4.08     0.00        1     0.00     0.00  tinyxml2::XMLDocument::~XMLDocument()
  0.00      4.08     0.00        1     0.00     0.00  tinyxml2::XMLDeclaration::ParseDeep(char*, tinyxml2::StrPair*)
  0.00      4.08     0.00        1     0.00     0.00  tinyxml2::XMLDeclaration::~XMLDeclaration()
  0.00      4.08     0.00        1     0.00     0.00  tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*)
  0.00      4.08     0.00        1     0.00     0.00  tinyxml2::MemPoolT<88>::SetTracked()
  0.00      4.08     0.00        1     0.00     0.00  tinyxml2::MemPoolT<88>::Free(void*)

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.25% of 4.08 seconds

index % time    self  children    called     name
                0.01    3.66       2/2           Simulation::plotVTK(int) [2]
[1]     90.0    0.01    3.66       2         FieldIterator<FlowField>::iterate() [1]
                2.38    0.51 3832290/3832290     FGHStencil::apply(FlowField&, int, int, int) [3]
                0.29    0.10 3832290/3832290     RHSStencil::apply(FlowField&, int, int, int) [4]
                0.18    0.16 3832290/3832290     VelocityStencil::apply(FlowField&, int, int, int) [5]
                0.01    0.02 3832290/5612950     MaxUStencil::apply(FlowField&, int, int, int) [15]
                0.01    0.01 3832290/3832290     ObstacleStencil::apply(FlowField&, int, int, int) [21]
                0.00    0.00   58212/58212       VTKStencil::apply(FlowField&, int, int, int) [44]
                0.00    0.00    3962/878492      FlowField::getCellsX() const [30]
                0.00    0.00    3962/2662312     FlowField::getCellsY() const [29]
                0.00    0.00    3962/4493532     FlowField::getCellsZ() const [55]
-----------------------------------------------
                                                 <spontaneous>
[2]     90.0    0.00    3.67                 Simulation::plotVTK(int) [2]
                0.01    3.66       2/2           FieldIterator<FlowField>::iterate() [1]
                0.00    0.00       2/2           VTKStencil::openFile(int) [86]
-----------------------------------------------
                2.38    0.51 3832290/3832290     FieldIterator<FlowField>::iterate() [1]
[3]     70.7    2.38    0.51 3832290         FGHStencil::apply(FlowField&, int, int, int) [3]
                0.18    0.00 107304120/168690310     VectorField::getVector(int, int, int) [6]
                0.13    0.00 103471830/130073656     UniformMeshsize::getDy(int, int, int) const [8]
                0.10    0.00 103471830/130073650     UniformMeshsize::getDx(int, int, int) const [9]
                0.05    0.00 103471830/130073650     UniformMeshsize::getDz(int, int, int) const [12]
                0.02    0.00 103471830/124744160     FlowField::getVelocity() [17]
                0.01    0.00 3832290/11546451     FlowField::getFlags() [18]
                0.01    0.00 3832290/39921860     FlowField::getFGH() [11]
                0.00    0.00 3832290/17868870     IntScalarField::getValue(int, int, int) [23]
-----------------------------------------------
                0.29    0.10 3832290/3832290     FieldIterator<FlowField>::iterate() [1]
[4]      9.5    0.29    0.10 3832290         RHSStencil::apply(FlowField&, int, int, int) [4]
                0.05    0.00 22993740/39921860     FlowField::getFGH() [11]
                0.04    0.00 22993740/168690310     VectorField::getVector(int, int, int) [6]
                0.00    0.00 3832290/130073656     UniformMeshsize::getDy(int, int, int) const [8]
                0.00    0.00 3832290/34622350     ScalarField::getScalar(int, int, int) [16]
                0.00    0.00 3832290/130073650     UniformMeshsize::getDx(int, int, int) const [9]
                0.00    0.00 3832290/130073650     UniformMeshsize::getDz(int, int, int) const [12]
                0.00    0.00 3832290/3833080     FlowField::getRHS() [56]
-----------------------------------------------
                0.18    0.16 3832290/3832290     FieldIterator<FlowField>::iterate() [1]
[5]      8.3    0.18    0.16 3832290         VelocityStencil::apply(FlowField&, int, int, int) [5]
                0.04    0.00 22993740/22994530     FlowField::getPressure() [13]
                0.04    0.00 22993740/168690310     VectorField::getVector(int, int, int) [6]
                0.02    0.00 22993740/34622350     ScalarField::getScalar(int, int, int) [16]
                0.02    0.00 11496870/39921860     FlowField::getFGH() [11]
                0.01    0.00 3832290/11546451     FlowField::getFlags() [18]
                0.01    0.00 7664580/130073656     UniformMeshsize::getDy(int, int, int) const [8]
                0.01    0.00 7664580/130073650     UniformMeshsize::getDx(int, int, int) const [9]
                0.00    0.00 7664580/130073650     UniformMeshsize::getDz(int, int, int) const [12]
                0.00    0.00 3832290/17868870     IntScalarField::getValue(int, int, int) [23]
                0.00    0.00 3832290/124744160     FlowField::getVelocity() [17]
-----------------------------------------------
                0.00    0.00  192000/168690310     FlowField::getPressureAndVelocity(double&, double*, int, int, int) [45]
                0.00    0.00  208560/168690310     MovingWallFGHStencil::applyLeftWall(FlowField&, int, int, int) [41]
                0.00    0.00  208560/168690310     MovingWallFGHStencil::applyRightWall(FlowField&, int, int, int) [43]
                0.00    0.00  208560/168690310     MovingWallFGHStencil::applyFrontWall(FlowField&, int, int, int) [42]
                0.00    0.00  208560/168690310     MovingWallFGHStencil::applyBackWall(FlowField&, int, int, int) [40]
                0.00    0.00  382360/168690310     MovingWallFGHStencil::applyBottomWall(FlowField&, int, int, int) [39]
                0.00    0.00  382360/168690310     MovingWallFGHStencil::applyTopWall(FlowField&, int, int, int) [38]
                0.00    0.00 1042800/168690310     MovingWallVelocityStencil::applyLeftWall(FlowField&, int, int, int) [37]
                0.00    0.00 1042800/168690310     MovingWallVelocityStencil::applyRightWall(FlowField&, int, int, int) [28]
                0.00    0.00 1042800/168690310     MovingWallVelocityStencil::applyFrontWall(FlowField&, int, int, int) [27]
                0.00    0.00 1042800/168690310     MovingWallVelocityStencil::applyBackWall(FlowField&, int, int, int) [36]
                0.00    0.00 1911800/168690310     MovingWallVelocityStencil::applyBottomWall(FlowField&, int, int, int) [26]
                0.00    0.00 1911800/168690310     MovingWallVelocityStencil::applyTopWall(FlowField&, int, int, int) [35]
                0.01    0.00 5612950/168690310     MaxUStencil::apply(FlowField&, int, int, int) [15]
                0.04    0.00 22993740/168690310     RHSStencil::apply(FlowField&, int, int, int) [4]
                0.04    0.00 22993740/168690310     VelocityStencil::apply(FlowField&, int, int, int) [5]
                0.18    0.00 107304120/168690310     FGHStencil::apply(FlowField&, int, int, int) [3]
[6]      7.0    0.29    0.00 168690310         VectorField::getVector(int, int, int) [6]
-----------------------------------------------
                                                 <spontaneous>
[7]      4.9    0.17    0.03                 computeMatrix3D(_p_KSP*, _p_Mat*, _p_Mat*, void*) [7]
                0.01    0.00 9492000/130073656     UniformMeshsize::getDy(int, int, int) const [8]
                0.01    0.00 9492000/130073650     UniformMeshsize::getDx(int, int, int) const [9]
                0.00    0.00 9492000/130073650     UniformMeshsize::getDz(int, int, int) const [12]
                0.00    0.00 3164000/17868870     IntScalarField::getValue(int, int, int) [23]
                0.00    0.00     791/11546451     FlowField::getFlags() [18]
-----------------------------------------------
                0.00    0.00       6/130073656     BFInputVelocityStencil::BFInputVelocityStencil(Parameters const&) [46]
                0.00    0.00 3832290/130073656     RHSStencil::apply(FlowField&, int, int, int) [4]
                0.01    0.00 5612950/130073656     MaxUStencil::apply(FlowField&, int, int, int) [15]
                0.01    0.00 7664580/130073656     VelocityStencil::apply(FlowField&, int, int, int) [5]
                0.01    0.00 9492000/130073656     computeMatrix3D(_p_KSP*, _p_Mat*, _p_Mat*, void*) [7]
                0.13    0.00 103471830/130073656     FGHStencil::apply(FlowField&, int, int, int) [3]
[8]      3.9    0.16    0.00 130073656         UniformMeshsize::getDy(int, int, int) const [8]
-----------------------------------------------
                0.00    0.00 3832290/130073650     RHSStencil::apply(FlowField&, int, int, int) [4]
                0.01    0.00 5612950/130073650     MaxUStencil::apply(FlowField&, int, int, int) [15]
                0.01    0.00 7664580/130073650     VelocityStencil::apply(FlowField&, int, int, int) [5]
                0.01    0.00 9492000/130073650     computeMatrix3D(_p_KSP*, _p_Mat*, _p_Mat*, void*) [7]
                0.10    0.00 103471830/130073650     FGHStencil::apply(FlowField&, int, int, int) [3]
[9]      3.2    0.13    0.00 130073650         UniformMeshsize::getDx(int, int, int) const [9]
-----------------------------------------------
                                                 <spontaneous>
[10]     2.0    0.00    0.08                 GlobalBoundaryIterator<FlowField>::iterate() [10]
                0.01    0.00  382360/382360      MovingWallVelocityStencil::applyBottomWall(FlowField&, int, int, int) [26]
                0.01    0.00  208560/208560      MovingWallVelocityStencil::applyFrontWall(FlowField&, int, int, int) [27]
                0.01    0.00  208560/208560      MovingWallVelocityStencil::applyRightWall(FlowField&, int, int, int) [28]
                0.00    0.01 1780660/5612950     MaxUStencil::apply(FlowField&, int, int, int) [15]
                0.01    0.00 2658350/2662312     FlowField::getCellsY() const [29]
                0.01    0.00  874530/878492      FlowField::getCellsX() const [30]
                0.00    0.00  382360/382360      MovingWallVelocityStencil::applyTopWall(FlowField&, int, int, int) [35]
                0.00    0.00  208560/208560      MovingWallVelocityStencil::applyBackWall(FlowField&, int, int, int) [36]
                0.00    0.00  208560/208560      MovingWallVelocityStencil::applyLeftWall(FlowField&, int, int, int) [37]
                0.00    0.00  382360/382360      MovingWallFGHStencil::applyTopWall(FlowField&, int, int, int) [38]
                0.00    0.00  382360/382360      MovingWallFGHStencil::applyBottomWall(FlowField&, int, int, int) [39]
                0.00    0.00  208560/208560      MovingWallFGHStencil::applyBackWall(FlowField&, int, int, int) [40]
                0.00    0.00  208560/208560      MovingWallFGHStencil::applyFrontWall(FlowField&, int, int, int) [42]
                0.00    0.00  208560/208560      MovingWallFGHStencil::applyRightWall(FlowField&, int, int, int) [43]
                0.00    0.00  208560/208560      MovingWallFGHStencil::applyLeftWall(FlowField&, int, int, int) [41]
                0.00    0.00 4489570/4493532     FlowField::getCellsZ() const [55]
-----------------------------------------------
                0.00    0.00  208560/39921860     MovingWallFGHStencil::applyLeftWall(FlowField&, int, int, int) [41]
                0.00    0.00  208560/39921860     MovingWallFGHStencil::applyRightWall(FlowField&, int, int, int) [43]
                0.00    0.00  208560/39921860     MovingWallFGHStencil::applyFrontWall(FlowField&, int, int, int) [42]
                0.00    0.00  208560/39921860     MovingWallFGHStencil::applyBackWall(FlowField&, int, int, int) [40]
                0.00    0.00  382360/39921860     MovingWallFGHStencil::applyBottomWall(FlowField&, int, int, int) [39]
                0.00    0.00  382360/39921860     MovingWallFGHStencil::applyTopWall(FlowField&, int, int, int) [38]
                0.01    0.00 3832290/39921860     FGHStencil::apply(FlowField&, int, int, int) [3]
                0.02    0.00 11496870/39921860     VelocityStencil::apply(FlowField&, int, int, int) [5]
                0.05    0.00 22993740/39921860     RHSStencil::apply(FlowField&, int, int, int) [4]
[11]     2.0    0.08    0.00 39921860         FlowField::getFGH() [11]
-----------------------------------------------
                0.00    0.00 3832290/130073650     RHSStencil::apply(FlowField&, int, int, int) [4]
                0.00    0.00 5612950/130073650     MaxUStencil::apply(FlowField&, int, int, int) [15]
                0.00    0.00 7664580/130073650     VelocityStencil::apply(FlowField&, int, int, int) [5]
                0.00    0.00 9492000/130073650     computeMatrix3D(_p_KSP*, _p_Mat*, _p_Mat*, void*) [7]
                0.05    0.00 103471830/130073650     FGHStencil::apply(FlowField&, int, int, int) [3]
[12]     1.5    0.06    0.00 130073650         UniformMeshsize::getDz(int, int, int) const [12]
-----------------------------------------------
                0.00    0.00     790/22994530     PetscSolver::solve() [25]
                0.04    0.00 22993740/22994530     VelocityStencil::apply(FlowField&, int, int, int) [5]
[13]     1.0    0.04    0.00 22994530         FlowField::getPressure() [13]
-----------------------------------------------
                                                 <spontaneous>
[14]     1.0    0.00    0.04                 FlowField::FlowField(Parameters const&) [14]
                0.03    0.00       2/2           VectorField::VectorField(int, int, int) [20]
                0.02    0.00       2/2           ScalarField::ScalarField(int, int, int) [24]
                0.00    0.00       1/1           IntScalarField::IntScalarField(int, int, int) [112]
-----------------------------------------------
                0.00    0.01 1780660/5612950     GlobalBoundaryIterator<FlowField>::iterate() [10]
                0.01    0.02 3832290/5612950     FieldIterator<FlowField>::iterate() [1]
[15]     0.9    0.01    0.03 5612950         MaxUStencil::apply(FlowField&, int, int, int) [15]
                0.01    0.00 5612950/168690310     VectorField::getVector(int, int, int) [6]
                0.01    0.00 5612950/130073656     UniformMeshsize::getDy(int, int, int) const [8]
                0.01    0.00 5612950/130073650     UniformMeshsize::getDx(int, int, int) const [9]
                0.00    0.00 5612950/130073650     UniformMeshsize::getDz(int, int, int) const [12]
                0.00    0.00 5612950/124744160     FlowField::getVelocity() [17]
-----------------------------------------------
                0.00    0.00   48000/34622350     FlowField::getPressureAndVelocity(double&, double*, int, int, int) [45]
                0.00    0.00 3160000/34622350     computeRHS3D(_p_KSP*, _p_Vec*, void*) [22]
                0.00    0.00 3832290/34622350     RHSStencil::apply(FlowField&, int, int, int) [4]
                0.00    0.00 4588320/34622350     PetscSolver::solve() [25]
                0.02    0.00 22993740/34622350     VelocityStencil::apply(FlowField&, int, int, int) [5]
[16]     0.9    0.04    0.00 34622350         ScalarField::getScalar(int, int, int) [16]
-----------------------------------------------
                0.00    0.00 1042800/124744160     MovingWallVelocityStencil::applyLeftWall(FlowField&, int, int, int) [37]
                0.00    0.00 1042800/124744160     MovingWallVelocityStencil::applyRightWall(FlowField&, int, int, int) [28]
                0.00    0.00 1042800/124744160     MovingWallVelocityStencil::applyFrontWall(FlowField&, int, int, int) [27]
                0.00    0.00 1042800/124744160     MovingWallVelocityStencil::applyBackWall(FlowField&, int, int, int) [36]
                0.00    0.00 1911800/124744160     MovingWallVelocityStencil::applyBottomWall(FlowField&, int, int, int) [26]
                0.00    0.00 1911800/124744160     MovingWallVelocityStencil::applyTopWall(FlowField&, int, int, int) [35]
                0.00    0.00 3832290/124744160     VelocityStencil::apply(FlowField&, int, int, int) [5]
                0.00    0.00 3832290/124744160     ObstacleStencil::apply(FlowField&, int, int, int) [21]
                0.00    0.00 5612950/124744160     MaxUStencil::apply(FlowField&, int, int, int) [15]
                0.02    0.00 103471830/124744160     FGHStencil::apply(FlowField&, int, int, int) [3]
[17]     0.7    0.03    0.00 124744160         FlowField::getVelocity() [17]
-----------------------------------------------
                0.00    0.00     790/11546451     computeRHS3D(_p_KSP*, _p_Vec*, void*) [22]
                0.00    0.00     791/11546451     computeMatrix3D(_p_KSP*, _p_Mat*, _p_Mat*, void*) [7]
                0.00    0.00   48000/11546451     VTKStencil::apply(FlowField&, int, int, int) [44]
                0.01    0.00 3832290/11546451     FGHStencil::apply(FlowField&, int, int, int) [3]
                0.01    0.00 3832290/11546451     VelocityStencil::apply(FlowField&, int, int, int) [5]
                0.01    0.00 3832290/11546451     ObstacleStencil::apply(FlowField&, int, int, int) [21]
[18]     0.7    0.03    0.00 11546451         FlowField::getFlags() [18]
-----------------------------------------------
                                                 <spontaneous>
[19]     0.7    0.03    0.00                 UniformMeshsize::getDy(int, int) const [19]
-----------------------------------------------
                0.03    0.00       2/2           FlowField::FlowField(Parameters const&) [14]
[20]     0.6    0.03    0.00       2         VectorField::VectorField(int, int, int) [20]
-----------------------------------------------
                0.01    0.01 3832290/3832290     FieldIterator<FlowField>::iterate() [1]
[21]     0.6    0.01    0.01 3832290         ObstacleStencil::apply(FlowField&, int, int, int) [21]
                0.01    0.00 3832290/11546451     FlowField::getFlags() [18]
                0.00    0.00 3832290/17868870     IntScalarField::getValue(int, int, int) [23]
                0.00    0.00 3832290/124744160     FlowField::getVelocity() [17]
-----------------------------------------------
                                                 <spontaneous>
[22]     0.4    0.01    0.01                 computeRHS3D(_p_KSP*, _p_Vec*, void*) [22]
                0.00    0.00 3160000/34622350     ScalarField::getScalar(int, int, int) [16]
                0.00    0.00 3160000/17868870     IntScalarField::getValue(int, int, int) [23]
                0.00    0.00     790/11546451     FlowField::getFlags() [18]
                0.00    0.00     790/3833080     FlowField::getRHS() [56]
-----------------------------------------------
                0.00    0.00   48000/17868870     VTKStencil::apply(FlowField&, int, int, int) [44]
                0.00    0.00 3160000/17868870     computeRHS3D(_p_KSP*, _p_Vec*, void*) [22]
                0.00    0.00 3164000/17868870     computeMatrix3D(_p_KSP*, _p_Mat*, _p_Mat*, void*) [7]
                0.00    0.00 3832290/17868870     FGHStencil::apply(FlowField&, int, int, int) [3]
                0.00    0.00 3832290/17868870     VelocityStencil::apply(FlowField&, int, int, int) [5]
                0.00    0.00 3832290/17868870     ObstacleStencil::apply(FlowField&, int, int, int) [21]
[23]     0.4    0.02    0.00 17868870         IntScalarField::getValue(int, int, int) [23]
-----------------------------------------------
                0.02    0.00       2/2           FlowField::FlowField(Parameters const&) [14]
[24]     0.4    0.02    0.00       2         ScalarField::ScalarField(int, int, int) [24]
-----------------------------------------------
                                                 <spontaneous>
[25]     0.4    0.01    0.00                 PetscSolver::solve() [25]
                0.00    0.00 4588320/34622350     ScalarField::getScalar(int, int, int) [16]
                0.00    0.00     790/22994530     FlowField::getPressure() [13]
-----------------------------------------------
                0.01    0.00  382360/382360      GlobalBoundaryIterator<FlowField>::iterate() [10]
[26]     0.3    0.01    0.00  382360         MovingWallVelocityStencil::applyBottomWall(FlowField&, int, int, int) [26]
                0.00    0.00 1911800/168690310     VectorField::getVector(int, int, int) [6]
                0.00    0.00 1911800/124744160     FlowField::getVelocity() [17]
-----------------------------------------------
                0.01    0.00  208560/208560      GlobalBoundaryIterator<FlowField>::iterate() [10]
[27]     0.3    0.01    0.00  208560         MovingWallVelocityStencil::applyFrontWall(FlowField&, int, int, int) [27]
                0.00    0.00 1042800/168690310     VectorField::getVector(int, int, int) [6]
                0.00    0.00 1042800/124744160     FlowField::getVelocity() [17]
-----------------------------------------------
                0.01    0.00  208560/208560      GlobalBoundaryIterator<FlowField>::iterate() [10]
[28]     0.3    0.01    0.00  208560         MovingWallVelocityStencil::applyRightWall(FlowField&, int, int, int) [28]
                0.00    0.00 1042800/168690310     VectorField::getVector(int, int, int) [6]
                0.00    0.00 1042800/124744160     FlowField::getVelocity() [17]
-----------------------------------------------
                0.00    0.00    3962/2662312     FieldIterator<FlowField>::iterate() [1]
                0.01    0.00 2658350/2662312     GlobalBoundaryIterator<FlowField>::iterate() [10]
[29]     0.2    0.01    0.00 2662312         FlowField::getCellsY() const [29]
-----------------------------------------------
                0.00    0.00    3962/878492      FieldIterator<FlowField>::iterate() [1]
                0.01    0.00  874530/878492      GlobalBoundaryIterator<FlowField>::iterate() [10]
[30]     0.2    0.01    0.00  878492         FlowField::getCellsX() const [30]
-----------------------------------------------
                0.01    0.00      12/12          VTKStencil::write(FlowField&, int) [32]
[31]     0.2    0.01    0.00      12         VTKStencil::writeHeaderAndCoords() [31]
                0.00    0.00   58212/58212       UniformMeshsize::getPosX(int, int, int) const [57]
                0.00    0.00    2772/2775        UniformMeshsize::getPosY(int, int, int) const [58]
                0.00    0.00     252/252         UniformMeshsize::getPosZ(int, int, int) const [60]
-----------------------------------------------
                                                 <spontaneous>
[32]     0.2    0.00    0.01                 VTKStencil::write(FlowField&, int) [32]
                0.01    0.00      12/12          VTKStencil::writeHeaderAndCoords() [31]
-----------------------------------------------
                                                 <spontaneous>
[33]     0.2    0.01    0.00                 VelocityStencil::apply(FlowField&, int, int) [33]
-----------------------------------------------
                                                 <spontaneous>
[34]     0.1    0.01    0.00                 IntScalarField::initialize() [34]
-----------------------------------------------
                0.00    0.00  382360/382360      GlobalBoundaryIterator<FlowField>::iterate() [10]
[35]     0.1    0.00    0.00  382360         MovingWallVelocityStencil::applyTopWall(FlowField&, int, int, int) [35]
                0.00    0.00 1911800/168690310     VectorField::getVector(int, int, int) [6]
                0.00    0.00 1911800/124744160     FlowField::getVelocity() [17]
-----------------------------------------------
                0.00    0.00  208560/208560      GlobalBoundaryIterator<FlowField>::iterate() [10]
[36]     0.0    0.00    0.00  208560         MovingWallVelocityStencil::applyBackWall(FlowField&, int, int, int) [36]
                0.00    0.00 1042800/168690310     VectorField::getVector(int, int, int) [6]
                0.00    0.00 1042800/124744160     FlowField::getVelocity() [17]
-----------------------------------------------
                0.00    0.00  208560/208560      GlobalBoundaryIterator<FlowField>::iterate() [10]
[37]     0.0    0.00    0.00  208560         MovingWallVelocityStencil::applyLeftWall(FlowField&, int, int, int) [37]
                0.00    0.00 1042800/168690310     VectorField::getVector(int, int, int) [6]
                0.00    0.00 1042800/124744160     FlowField::getVelocity() [17]
-----------------------------------------------
                0.00    0.00  382360/382360      GlobalBoundaryIterator<FlowField>::iterate() [10]
[38]     0.0    0.00    0.00  382360         MovingWallFGHStencil::applyTopWall(FlowField&, int, int, int) [38]
                0.00    0.00  382360/39921860     FlowField::getFGH() [11]
                0.00    0.00  382360/168690310     VectorField::getVector(int, int, int) [6]
-----------------------------------------------
                0.00    0.00  382360/382360      GlobalBoundaryIterator<FlowField>::iterate() [10]
[39]     0.0    0.00    0.00  382360         MovingWallFGHStencil::applyBottomWall(FlowField&, int, int, int) [39]
                0.00    0.00  382360/39921860     FlowField::getFGH() [11]
                0.00    0.00  382360/168690310     VectorField::getVector(int, int, int) [6]
-----------------------------------------------
                0.00    0.00  208560/208560      GlobalBoundaryIterator<FlowField>::iterate() [10]
[40]     0.0    0.00    0.00  208560         MovingWallFGHStencil::applyBackWall(FlowField&, int, int, int) [40]
                0.00    0.00  208560/39921860     FlowField::getFGH() [11]
                0.00    0.00  208560/168690310     VectorField::getVector(int, int, int) [6]
-----------------------------------------------
                0.00    0.00  208560/208560      GlobalBoundaryIterator<FlowField>::iterate() [10]
[41]     0.0    0.00    0.00  208560         MovingWallFGHStencil::applyLeftWall(FlowField&, int, int, int) [41]
                0.00    0.00  208560/39921860     FlowField::getFGH() [11]
                0.00    0.00  208560/168690310     VectorField::getVector(int, int, int) [6]
-----------------------------------------------
                0.00    0.00  208560/208560      GlobalBoundaryIterator<FlowField>::iterate() [10]
[42]     0.0    0.00    0.00  208560         MovingWallFGHStencil::applyFrontWall(FlowField&, int, int, int) [42]
                0.00    0.00  208560/39921860     FlowField::getFGH() [11]
                0.00    0.00  208560/168690310     VectorField::getVector(int, int, int) [6]
-----------------------------------------------
                0.00    0.00  208560/208560      GlobalBoundaryIterator<FlowField>::iterate() [10]
[43]     0.0    0.00    0.00  208560         MovingWallFGHStencil::applyRightWall(FlowField&, int, int, int) [43]
                0.00    0.00  208560/39921860     FlowField::getFGH() [11]
                0.00    0.00  208560/168690310     VectorField::getVector(int, int, int) [6]
-----------------------------------------------
                0.00    0.00   58212/58212       FieldIterator<FlowField>::iterate() [1]
[44]     0.0    0.00    0.00   58212         VTKStencil::apply(FlowField&, int, int, int) [44]
                0.00    0.00   48000/48000       FlowField::getPressureAndVelocity(double&, double*, int, int, int) [45]
                0.00    0.00   48000/11546451     FlowField::getFlags() [18]
                0.00    0.00   48000/17868870     IntScalarField::getValue(int, int, int) [23]
-----------------------------------------------
                0.00    0.00   48000/48000       VTKStencil::apply(FlowField&, int, int, int) [44]
[45]     0.0    0.00    0.00   48000         FlowField::getPressureAndVelocity(double&, double*, int, int, int) [45]
                0.00    0.00  192000/168690310     VectorField::getVector(int, int, int) [6]
                0.00    0.00   48000/34622350     ScalarField::getScalar(int, int, int) [16]
-----------------------------------------------
                0.00    0.00       1/1           GlobalBoundaryFactory::GlobalBoundaryFactory(Parameters&) [47]
[46]     0.0    0.00    0.00       1         BFInputVelocityStencil::BFInputVelocityStencil(Parameters const&) [46]
                0.00    0.00       6/130073656     UniformMeshsize::getDy(int, int, int) const [8]
                0.00    0.00       3/2775        UniformMeshsize::getPosY(int, int, int) const [58]
-----------------------------------------------
                                                 <spontaneous>
[47]     0.0    0.00    0.00                 GlobalBoundaryFactory::GlobalBoundaryFactory(Parameters&) [47]
                0.00    0.00       1/1           BFInputVelocityStencil::BFInputVelocityStencil(Parameters const&) [46]
                0.00    0.00       1/1           PeriodicBoundaryVelocityStencil::PeriodicBoundaryVelocityStencil(Parameters const&) [131]
                0.00    0.00       1/1           PeriodicBoundaryFGHStencil::PeriodicBoundaryFGHStencil(Parameters const&) [125]
                0.00    0.00       1/1           MovingWallVelocityStencil::MovingWallVelocityStencil(Parameters const&) [121]
                0.00    0.00       1/1           MovingWallFGHStencil::MovingWallFGHStencil(Parameters const&) [117]
                0.00    0.00       1/1           NeumannVelocityBoundaryStencil::NeumannVelocityBoundaryStencil(Parameters const&) [129]
                0.00    0.00       1/1           NeumannFGHBoundaryStencil::NeumannFGHBoundaryStencil(Parameters const&) [123]
                0.00    0.00       1/1           BFInputFGHStencil::BFInputFGHStencil(Parameters const&) [115]
-----------------------------------------------
                0.00    0.00    3962/4493532     FieldIterator<FlowField>::iterate() [1]
                0.00    0.00 4489570/4493532     GlobalBoundaryIterator<FlowField>::iterate() [10]
[55]     0.0    0.00    0.00 4493532         FlowField::getCellsZ() const [55]
-----------------------------------------------
                0.00    0.00     790/3833080     computeRHS3D(_p_KSP*, _p_Vec*, void*) [22]
                0.00    0.00 3832290/3833080     RHSStencil::apply(FlowField&, int, int, int) [4]
[56]     0.0    0.00    0.00 3833080         FlowField::getRHS() [56]
-----------------------------------------------
                0.00    0.00   58212/58212       VTKStencil::writeHeaderAndCoords() [31]
[57]     0.0    0.00    0.00   58212         UniformMeshsize::getPosX(int, int, int) const [57]
-----------------------------------------------
                0.00    0.00       3/2775        BFInputVelocityStencil::BFInputVelocityStencil(Parameters const&) [46]
                0.00    0.00    2772/2775        VTKStencil::writeHeaderAndCoords() [31]
[58]     0.0    0.00    0.00    2775         UniformMeshsize::getPosY(int, int, int) const [58]
-----------------------------------------------
                0.00    0.00      28/299         tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
                0.00    0.00      84/299         tinyxml2::XMLElement::ParseAttributes(char*) [65]
                0.00    0.00      85/299         tinyxml2::XMLElement::FindAttribute(char const*) const [70]
                0.00    0.00     102/299         tinyxml2::XMLNode::FirstChildElement(char const*) const [64]
[59]     0.0    0.00    0.00     299         tinyxml2::StrPair::GetStr() [59]
-----------------------------------------------
                0.00    0.00     252/252         VTKStencil::writeHeaderAndCoords() [31]
[60]     0.0    0.00    0.00     252         UniformMeshsize::getPosZ(int, int, int) const [60]
-----------------------------------------------
                0.00    0.00     106/220         tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
                0.00    0.00     114/220         tinyxml2::XMLNode::FirstChildElement(char const*) const [64]
[61]     0.0    0.00    0.00     220         tinyxml2::XMLElement::ToElement() [61]
-----------------------------------------------
                0.00    0.00      38/78          tinyxml2::XMLAttribute::ParseDeep(char*, bool) [71]
                0.00    0.00      40/78          tinyxml2::XMLElement::ParseDeep(char*, tinyxml2::StrPair*) [66]
[62]     0.0    0.00    0.00      78         tinyxml2::StrPair::ParseName(char*) [62]
-----------------------------------------------
                0.00    0.00      46/46          tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
[63]     0.0    0.00    0.00      46         tinyxml2::XMLDocument::Identify(char*, tinyxml2::XMLNode**) [63]
-----------------------------------------------
                0.00    0.00      12/44          readWall(tinyxml2::XMLElement*, double*, double&) [79]
                0.00    0.00      32/44          Configuration::loadParameters(Parameters&, ompi_communicator_t* const&) [200]
[64]     0.0    0.00    0.00      44         tinyxml2::XMLNode::FirstChildElement(char const*) const [64]
                0.00    0.00     114/220         tinyxml2::XMLElement::ToElement() [61]
                0.00    0.00     102/299         tinyxml2::StrPair::GetStr() [59]
                0.00    0.00      12/22          tinyxml2::XMLNode::ToElement() [74]
-----------------------------------------------
                0.00    0.00      40/40          tinyxml2::XMLElement::ParseDeep(char*, tinyxml2::StrPair*) [66]
[65]     0.0    0.00    0.00      40         tinyxml2::XMLElement::ParseAttributes(char*) [65]
                0.00    0.00      84/299         tinyxml2::StrPair::GetStr() [59]
                0.00    0.00      38/38          tinyxml2::XMLAttribute::ParseDeep(char*, bool) [71]
-----------------------------------------------
                0.00    0.00      40/40          tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
[66]     0.0    0.00    0.00      40         tinyxml2::XMLElement::ParseDeep(char*, tinyxml2::StrPair*) [66]
                0.00    0.00      40/78          tinyxml2::StrPair::ParseName(char*) [62]
                0.00    0.00      40/40          tinyxml2::XMLElement::ParseAttributes(char*) [65]
-----------------------------------------------
                0.00    0.00       1/40          tinyxml2::XMLDocument::~XMLDocument() [136]
                0.00    0.00      14/40          tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
                0.00    0.00      25/40          tinyxml2::XMLNode::~XMLNode() [75]
[67]     0.0    0.00    0.00      40         tinyxml2::XMLElement::~XMLElement() [67]
                0.00    0.00      38/38          tinyxml2::MemPoolT<72>::Free(void*) [72]
-----------------------------------------------
                0.00    0.00      40/40          tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
[68]     0.0    0.00    0.00      40         tinyxml2::MemPoolT<104>::SetTracked() [68]
-----------------------------------------------
                0.00    0.00       1/40          tinyxml2::XMLDocument::~XMLDocument() [136]
                0.00    0.00      14/40          tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
                0.00    0.00      25/40          tinyxml2::XMLNode::~XMLNode() [75]
[69]     0.0    0.00    0.00      40         tinyxml2::MemPoolT<104>::Free(void*) [69]
-----------------------------------------------
                0.00    0.00      18/39          readWall(tinyxml2::XMLElement*, double*, double&) [79]
                0.00    0.00      21/39          Configuration::loadParameters(Parameters&, ompi_communicator_t* const&) [200]
[70]     0.0    0.00    0.00      39         tinyxml2::XMLElement::FindAttribute(char const*) const [70]
                0.00    0.00      85/299         tinyxml2::StrPair::GetStr() [59]
-----------------------------------------------
                0.00    0.00      38/38          tinyxml2::XMLElement::ParseAttributes(char*) [65]
[71]     0.0    0.00    0.00      38         tinyxml2::XMLAttribute::ParseDeep(char*, bool) [71]
                0.00    0.00      38/78          tinyxml2::StrPair::ParseName(char*) [62]
-----------------------------------------------
                0.00    0.00      38/38          tinyxml2::XMLElement::~XMLElement() [67]
[72]     0.0    0.00    0.00      38         tinyxml2::MemPoolT<72>::Free(void*) [72]
-----------------------------------------------
                0.00    0.00      13/31          Configuration::loadParameters(Parameters&, ompi_communicator_t* const&) [200]
                0.00    0.00      18/31          readWall(tinyxml2::XMLElement*, double*, double&) [79]
[73]     0.0    0.00    0.00      31         tinyxml2::XMLAttribute::QueryDoubleValue(double*) const [73]
-----------------------------------------------
                0.00    0.00      10/22          tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
                0.00    0.00      12/22          tinyxml2::XMLNode::FirstChildElement(char const*) const [64]
[74]     0.0    0.00    0.00      22         tinyxml2::XMLNode::ToElement() [74]
-----------------------------------------------
                                  29             tinyxml2::XMLNode::~XMLNode() [75]
                0.00    0.00       1/17          Configuration::loadParameters(Parameters&, ompi_communicator_t* const&) [200]
                0.00    0.00       2/17          tinyxml2::XMLDocument::~XMLDocument() [136]
                0.00    0.00      14/17          tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
[75]     0.0    0.00    0.00      17+29      tinyxml2::XMLNode::~XMLNode() [75]
                0.00    0.00      25/40          tinyxml2::XMLElement::~XMLElement() [67]
                0.00    0.00      25/40          tinyxml2::MemPoolT<104>::Free(void*) [69]
                0.00    0.00       4/4           tinyxml2::XMLText::~XMLText() [82]
                0.00    0.00       4/4           tinyxml2::MemPoolT<96>::Free(void*) [84]
                                  29             tinyxml2::XMLNode::~XMLNode() [75]
-----------------------------------------------
                0.00    0.00      16/16          tinyxml2::XMLElement::GetText() const [77]
[76]     0.0    0.00    0.00      16         tinyxml2::XMLText::ToText() const [76]
-----------------------------------------------
                0.00    0.00       8/8           readStringMandatory(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, tinyxml2::XMLElement*) [80]
[77]     0.0    0.00    0.00       8         tinyxml2::XMLElement::GetText() const [77]
                0.00    0.00      16/16          tinyxml2::XMLText::ToText() const [76]
-----------------------------------------------
                0.00    0.00       7/7           Configuration::loadParameters(Parameters&, ompi_communicator_t* const&) [200]
[78]     0.0    0.00    0.00       7         tinyxml2::XMLAttribute::QueryIntValue(int*) const [78]
-----------------------------------------------
                0.00    0.00       6/6           Configuration::loadParameters(Parameters&, ompi_communicator_t* const&) [200]
[79]     0.0    0.00    0.00       6         readWall(tinyxml2::XMLElement*, double*, double&) [79]
                0.00    0.00      18/39          tinyxml2::XMLElement::FindAttribute(char const*) const [70]
                0.00    0.00      18/31          tinyxml2::XMLAttribute::QueryDoubleValue(double*) const [73]
                0.00    0.00      12/44          tinyxml2::XMLNode::FirstChildElement(char const*) const [64]
-----------------------------------------------
                0.00    0.00       4/4           Configuration::loadParameters(Parameters&, ompi_communicator_t* const&) [200]
[80]     0.0    0.00    0.00       4         readStringMandatory(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, tinyxml2::XMLElement*) [80]
                0.00    0.00       8/8           tinyxml2::XMLElement::GetText() const [77]
-----------------------------------------------
                0.00    0.00       4/4           tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
[81]     0.0    0.00    0.00       4         tinyxml2::XMLText::ParseDeep(char*, tinyxml2::StrPair*) [81]
-----------------------------------------------
                0.00    0.00       4/4           tinyxml2::XMLNode::~XMLNode() [75]
[82]     0.0    0.00    0.00       4         tinyxml2::XMLText::~XMLText() [82]
-----------------------------------------------
                0.00    0.00       4/4           tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
[83]     0.0    0.00    0.00       4         tinyxml2::MemPoolT<96>::SetTracked() [83]
-----------------------------------------------
                0.00    0.00       4/4           tinyxml2::XMLNode::~XMLNode() [75]
[84]     0.0    0.00    0.00       4         tinyxml2::MemPoolT<96>::Free(void*) [84]
-----------------------------------------------
                0.00    0.00       3/3           Configuration::loadParameters(Parameters&, ompi_communicator_t* const&) [200]
[85]     0.0    0.00    0.00       3         broadcastString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ompi_communicator_t* const&, int) [85]
-----------------------------------------------
                0.00    0.00       2/2           Simulation::plotVTK(int) [2]
[86]     0.0    0.00    0.00       2         VTKStencil::openFile(int) [86]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[87]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z12createLimitsR10ParametersRP5_p_DMPiS4_S4_ [87]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[88]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z14timeDifferenceRK7timevalS1_ [88]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[89]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z17computeVelocity3DR9FlowFieldiiidRK10Parameters [89]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[90]     0.0    0.00    0.00       1         _GLOBAL__sub_I__Z18readFloatMandatoryRdPN8tinyxml210XMLElementEPKc [90]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[91]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN10FGHStencilC2ERK10Parameters [91]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[92]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN10RHSStencilC2ERK10Parameters [92]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[93]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN10VTKStencilC2ERK10Parameters [93]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[94]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN11MaxUStencilC2ERK10Parameters [94]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[95]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN11ScalarFieldC2Eii [95]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[96]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN12LinearSolverC2ER9FlowFieldRK10Parameters [96]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[97]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN15ObstacleStencilC2ERK10Parameters [97]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[98]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN15UniformMeshsizeC2ERK10Parameters [98]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[99]     0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN15VelocityStencilC2ERK10Parameters [99]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[100]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN17BFStepInitStencilC2ERK10Parameters [100]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[101]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN21GlobalBoundaryFactoryC2ER10Parameters [101]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[102]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN25MovingWallVelocityStencilC2ERK10Parameters [102]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[103]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN26PetscParallelConfigurationC2ER10Parameters [103]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[104]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN30NeumannVelocityBoundaryStencilC2ERK10Parameters [104]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[105]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN31PeriodicBoundaryVelocityStencilC2ERK10Parameters [105]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[106]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN9FlowFieldC2Eii [106]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[107]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN9SORSolverC2ER9FlowFieldRK10Parameters [107]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [511]
[108]    0.0    0.00    0.00       1         _GLOBAL__sub_I_main [108]
-----------------------------------------------
                0.00    0.00       1/1           PetscSolver::PetscSolver(FlowField&, Parameters&) [178]
[109]    0.0    0.00    0.00       1         createLimits(Parameters&, _p_DM*&, int*, int*, int*) [109]
-----------------------------------------------
                0.00    0.00       1/1           Simulation::initializeFlowField() [164]
[110]    0.0    0.00    0.00       1         PetscSolver::reInitMatrix() [110]
-----------------------------------------------
                0.00    0.00       1/1           PetscSolver::PetscSolver(FlowField&, Parameters&) [178]
[111]    0.0    0.00    0.00       1         LinearSolver::LinearSolver(FlowField&, Parameters const&) [111]
-----------------------------------------------
                0.00    0.00       1/1           FlowField::FlowField(Parameters const&) [14]
[112]    0.0    0.00    0.00       1         IntScalarField::IntScalarField(int, int, int) [112]
-----------------------------------------------
                0.00    0.00       1/1           MeshsizeFactory::initMeshsize(Parameters&) [207]
[113]    0.0    0.00    0.00       1         UniformMeshsize::UniformMeshsize(Parameters const&) [113]
-----------------------------------------------
                0.00    0.00       1/1           Parameters::~Parameters() [157]
[114]    0.0    0.00    0.00       1         UniformMeshsize::~UniformMeshsize() [114]
-----------------------------------------------
                0.00    0.00       1/1           GlobalBoundaryFactory::GlobalBoundaryFactory(Parameters&) [47]
[115]    0.0    0.00    0.00       1         BFInputFGHStencil::BFInputFGHStencil(Parameters const&) [115]
-----------------------------------------------
                0.00    0.00       1/1           Simulation::~Simulation() [165]
[116]    0.0    0.00    0.00       1         BFInputFGHStencil::~BFInputFGHStencil() [116]
-----------------------------------------------
                0.00    0.00       1/1           GlobalBoundaryFactory::GlobalBoundaryFactory(Parameters&) [47]
[117]    0.0    0.00    0.00       1         MovingWallFGHStencil::MovingWallFGHStencil(Parameters const&) [117]
-----------------------------------------------
                0.00    0.00       1/1           GlobalBoundaryFactory::~GlobalBoundaryFactory() [119]
[118]    0.0    0.00    0.00       1         MovingWallFGHStencil::~MovingWallFGHStencil() [118]
-----------------------------------------------
                0.00    0.00       1/1           Simulation::~Simulation() [165]
[119]    0.0    0.00    0.00       1         GlobalBoundaryFactory::~GlobalBoundaryFactory() [119]
                0.00    0.00       1/1           MovingWallFGHStencil::~MovingWallFGHStencil() [118]
                0.00    0.00       1/1           MovingWallVelocityStencil::~MovingWallVelocityStencil() [122]
                0.00    0.00       1/1           PeriodicBoundaryVelocityStencil::~PeriodicBoundaryVelocityStencil() [132]
                0.00    0.00       1/1           PeriodicBoundaryFGHStencil::~PeriodicBoundaryFGHStencil() [126]
                0.00    0.00       1/1           NeumannVelocityBoundaryStencil::~NeumannVelocityBoundaryStencil() [130]
                0.00    0.00       1/1           NeumannFGHBoundaryStencil::~NeumannFGHBoundaryStencil() [124]
                0.00    0.00       1/1           BFInputVelocityStencil::~BFInputVelocityStencil() [120]
-----------------------------------------------
                0.00    0.00       1/1           GlobalBoundaryFactory::~GlobalBoundaryFactory() [119]
[120]    0.0    0.00    0.00       1         BFInputVelocityStencil::~BFInputVelocityStencil() [120]
-----------------------------------------------
                0.00    0.00       1/1           GlobalBoundaryFactory::GlobalBoundaryFactory(Parameters&) [47]
[121]    0.0    0.00    0.00       1         MovingWallVelocityStencil::MovingWallVelocityStencil(Parameters const&) [121]
-----------------------------------------------
                0.00    0.00       1/1           GlobalBoundaryFactory::~GlobalBoundaryFactory() [119]
[122]    0.0    0.00    0.00       1         MovingWallVelocityStencil::~MovingWallVelocityStencil() [122]
-----------------------------------------------
                0.00    0.00       1/1           GlobalBoundaryFactory::GlobalBoundaryFactory(Parameters&) [47]
[123]    0.0    0.00    0.00       1         NeumannFGHBoundaryStencil::NeumannFGHBoundaryStencil(Parameters const&) [123]
-----------------------------------------------
                0.00    0.00       1/1           GlobalBoundaryFactory::~GlobalBoundaryFactory() [119]
[124]    0.0    0.00    0.00       1         NeumannFGHBoundaryStencil::~NeumannFGHBoundaryStencil() [124]
-----------------------------------------------
                0.00    0.00       1/1           GlobalBoundaryFactory::GlobalBoundaryFactory(Parameters&) [47]
[125]    0.0    0.00    0.00       1         PeriodicBoundaryFGHStencil::PeriodicBoundaryFGHStencil(Parameters const&) [125]
-----------------------------------------------
                0.00    0.00       1/1           GlobalBoundaryFactory::~GlobalBoundaryFactory() [119]
[126]    0.0    0.00    0.00       1         PeriodicBoundaryFGHStencil::~PeriodicBoundaryFGHStencil() [126]
-----------------------------------------------
                0.00    0.00       1/1           PetscParallelConfiguration::PetscParallelConfiguration(Parameters&) [253]
[127]    0.0    0.00    0.00       1         PetscParallelConfiguration::computeSizes() [127]
-----------------------------------------------
                0.00    0.00       1/1           PetscParallelConfiguration::PetscParallelConfiguration(Parameters&) [253]
[128]    0.0    0.00    0.00       1         PetscParallelConfiguration::locateNeighbors() [128]
-----------------------------------------------
                0.00    0.00       1/1           GlobalBoundaryFactory::GlobalBoundaryFactory(Parameters&) [47]
[129]    0.0    0.00    0.00       1         NeumannVelocityBoundaryStencil::NeumannVelocityBoundaryStencil(Parameters const&) [129]
-----------------------------------------------
                0.00    0.00       1/1           GlobalBoundaryFactory::~GlobalBoundaryFactory() [119]
[130]    0.0    0.00    0.00       1         NeumannVelocityBoundaryStencil::~NeumannVelocityBoundaryStencil() [130]
-----------------------------------------------
                0.00    0.00       1/1           GlobalBoundaryFactory::GlobalBoundaryFactory(Parameters&) [47]
[131]    0.0    0.00    0.00       1         PeriodicBoundaryVelocityStencil::PeriodicBoundaryVelocityStencil(Parameters const&) [131]
-----------------------------------------------
                0.00    0.00       1/1           GlobalBoundaryFactory::~GlobalBoundaryFactory() [119]
[132]    0.0    0.00    0.00       1         PeriodicBoundaryVelocityStencil::~PeriodicBoundaryVelocityStencil() [132]
-----------------------------------------------
                0.00    0.00       1/1           tinyxml2::XMLDocument::LoadFile(char const*) [134]
[133]    0.0    0.00    0.00       1         tinyxml2::XMLDocument::LoadFile(_IO_FILE*) [133]
                0.00    0.00       1/1           tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
-----------------------------------------------
                0.00    0.00       1/1           Configuration::loadParameters(Parameters&, ompi_communicator_t* const&) [200]
[134]    0.0    0.00    0.00       1         tinyxml2::XMLDocument::LoadFile(char const*) [134]
                0.00    0.00       1/1           tinyxml2::XMLDocument::LoadFile(_IO_FILE*) [133]
-----------------------------------------------
                0.00    0.00       1/1           Configuration::loadParameters(Parameters&, ompi_communicator_t* const&) [200]
[135]    0.0    0.00    0.00       1         tinyxml2::XMLDocument::XMLDocument(bool, tinyxml2::Whitespace) [135]
-----------------------------------------------
                0.00    0.00       1/1           Configuration::loadParameters(Parameters&, ompi_communicator_t* const&) [200]
[136]    0.0    0.00    0.00       1         tinyxml2::XMLDocument::~XMLDocument() [136]
                0.00    0.00       2/17          tinyxml2::XMLNode::~XMLNode() [75]
                0.00    0.00       1/40          tinyxml2::XMLElement::~XMLElement() [67]
                0.00    0.00       1/1           tinyxml2::XMLDeclaration::~XMLDeclaration() [138]
                0.00    0.00       1/40          tinyxml2::MemPoolT<104>::Free(void*) [69]
                0.00    0.00       1/1           tinyxml2::MemPoolT<88>::Free(void*) [141]
-----------------------------------------------
                0.00    0.00       1/1           tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
[137]    0.0    0.00    0.00       1         tinyxml2::XMLDeclaration::ParseDeep(char*, tinyxml2::StrPair*) [137]
-----------------------------------------------
                0.00    0.00       1/1           tinyxml2::XMLDocument::~XMLDocument() [136]
[138]    0.0    0.00    0.00       1         tinyxml2::XMLDeclaration::~XMLDeclaration() [138]
-----------------------------------------------
                                  14             tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
                0.00    0.00       1/1           tinyxml2::XMLDocument::LoadFile(_IO_FILE*) [133]
[139]    0.0    0.00    0.00       1+14      tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
                0.00    0.00     106/220         tinyxml2::XMLElement::ToElement() [61]
                0.00    0.00      46/46          tinyxml2::XMLDocument::Identify(char*, tinyxml2::XMLNode**) [63]
                0.00    0.00      40/40          tinyxml2::XMLElement::ParseDeep(char*, tinyxml2::StrPair*) [66]
                0.00    0.00      40/40          tinyxml2::MemPoolT<104>::SetTracked() [68]
                0.00    0.00      28/299         tinyxml2::StrPair::GetStr() [59]
                0.00    0.00      14/17          tinyxml2::XMLNode::~XMLNode() [75]
                0.00    0.00      14/40          tinyxml2::XMLElement::~XMLElement() [67]
                0.00    0.00      14/40          tinyxml2::MemPoolT<104>::Free(void*) [69]
                0.00    0.00      10/22          tinyxml2::XMLNode::ToElement() [74]
                0.00    0.00       4/4           tinyxml2::XMLText::ParseDeep(char*, tinyxml2::StrPair*) [81]
                0.00    0.00       4/4           tinyxml2::MemPoolT<96>::SetTracked() [83]
                0.00    0.00       1/1           tinyxml2::XMLDeclaration::ParseDeep(char*, tinyxml2::StrPair*) [137]
                0.00    0.00       1/1           tinyxml2::MemPoolT<88>::SetTracked() [140]
                                  14             tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
-----------------------------------------------
                0.00    0.00       1/1           tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*) [139]
[140]    0.0    0.00    0.00       1         tinyxml2::MemPoolT<88>::SetTracked() [140]
-----------------------------------------------
                0.00    0.00       1/1           tinyxml2::XMLDocument::~XMLDocument() [136]
[141]    0.0    0.00    0.00       1         tinyxml2::MemPoolT<88>::Free(void*) [141]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [87] _GLOBAL__sub_I__Z12createLimitsR10ParametersRP5_p_DMPiS4_S4_ [23] IntScalarField::getValue(int, int, int) [133] tinyxml2::XMLDocument::LoadFile(_IO_FILE*)
  [88] _GLOBAL__sub_I__Z14timeDifferenceRK7timevalS1_ [112] IntScalarField::IntScalarField(int, int, int) [134] tinyxml2::XMLDocument::LoadFile(char const*)
  [89] _GLOBAL__sub_I__Z17computeVelocity3DR9FlowFieldiiidRK10Parameters [21] ObstacleStencil::apply(FlowField&, int, int, int) [135] tinyxml2::XMLDocument::XMLDocument(bool, tinyxml2::Whitespace)
  [90] _GLOBAL__sub_I__Z18readFloatMandatoryRdPN8tinyxml210XMLElementEPKc [113] UniformMeshsize::UniformMeshsize(Parameters const&) [136] tinyxml2::XMLDocument::~XMLDocument()
  [91] _GLOBAL__sub_I__ZN10FGHStencilC2ERK10Parameters [114] UniformMeshsize::~UniformMeshsize() [71] tinyxml2::XMLAttribute::ParseDeep(char*, bool)
  [92] _GLOBAL__sub_I__ZN10RHSStencilC2ERK10Parameters [33] VelocityStencil::apply(FlowField&, int, int) [137] tinyxml2::XMLDeclaration::ParseDeep(char*, tinyxml2::StrPair*)
  [93] _GLOBAL__sub_I__ZN10VTKStencilC2ERK10Parameters [5] VelocityStencil::apply(FlowField&, int, int, int) [138] tinyxml2::XMLDeclaration::~XMLDeclaration()
  [94] _GLOBAL__sub_I__ZN11MaxUStencilC2ERK10Parameters [115] BFInputFGHStencil::BFInputFGHStencil(Parameters const&) [59] tinyxml2::StrPair::GetStr()
  [95] _GLOBAL__sub_I__ZN11ScalarFieldC2Eii [116] BFInputFGHStencil::~BFInputFGHStencil() [62] tinyxml2::StrPair::ParseName(char*)
  [96] _GLOBAL__sub_I__ZN12LinearSolverC2ER9FlowFieldRK10Parameters [38] MovingWallFGHStencil::applyTopWall(FlowField&, int, int, int) [139] tinyxml2::XMLNode::ParseDeep(char*, tinyxml2::StrPair*)
  [97] _GLOBAL__sub_I__ZN15ObstacleStencilC2ERK10Parameters [40] MovingWallFGHStencil::applyBackWall(FlowField&, int, int, int) [74] tinyxml2::XMLNode::ToElement()
  [98] _GLOBAL__sub_I__ZN15UniformMeshsizeC2ERK10Parameters [41] MovingWallFGHStencil::applyLeftWall(FlowField&, int, int, int) [75] tinyxml2::XMLNode::~XMLNode()
  [99] _GLOBAL__sub_I__ZN15VelocityStencilC2ERK10Parameters [42] MovingWallFGHStencil::applyFrontWall(FlowField&, int, int, int) [81] tinyxml2::XMLText::ParseDeep(char*, tinyxml2::StrPair*)
 [100] _GLOBAL__sub_I__ZN17BFStepInitStencilC2ERK10Parameters [43] MovingWallFGHStencil::applyRightWall(FlowField&, int, int, int) [82] tinyxml2::XMLText::~XMLText()
 [101] _GLOBAL__sub_I__ZN21GlobalBoundaryFactoryC2ER10Parameters [39] MovingWallFGHStencil::applyBottomWall(FlowField&, int, int, int) [68] tinyxml2::MemPoolT<104>::SetTracked()
 [102] _GLOBAL__sub_I__ZN25MovingWallVelocityStencilC2ERK10Parameters [117] MovingWallFGHStencil::MovingWallFGHStencil(Parameters const&) [69] tinyxml2::MemPoolT<104>::Free(void*)
 [103] _GLOBAL__sub_I__ZN26PetscParallelConfigurationC2ER10Parameters [118] MovingWallFGHStencil::~MovingWallFGHStencil() [72] tinyxml2::MemPoolT<72>::Free(void*)
 [104] _GLOBAL__sub_I__ZN30NeumannVelocityBoundaryStencilC2ERK10Parameters [119] GlobalBoundaryFactory::~GlobalBoundaryFactory() [140] tinyxml2::MemPoolT<88>::SetTracked()
 [105] _GLOBAL__sub_I__ZN31PeriodicBoundaryVelocityStencilC2ERK10Parameters [46] BFInputVelocityStencil::BFInputVelocityStencil(Parameters const&) [141] tinyxml2::MemPoolT<88>::Free(void*)
 [106] _GLOBAL__sub_I__ZN9FlowFieldC2Eii [120] BFInputVelocityStencil::~BFInputVelocityStencil() [83] tinyxml2::MemPoolT<96>::SetTracked()
 [107] _GLOBAL__sub_I__ZN9SORSolverC2ER9FlowFieldRK10Parameters [35] MovingWallVelocityStencil::applyTopWall(FlowField&, int, int, int) [84] tinyxml2::MemPoolT<96>::Free(void*)
 [108] _GLOBAL__sub_I_main    [36] MovingWallVelocityStencil::applyBackWall(FlowField&, int, int, int) [13] FlowField::getPressure()
  [22] computeRHS3D(_p_KSP*, _p_Vec*, void*) [37] MovingWallVelocityStencil::applyLeftWall(FlowField&, int, int, int) [17] FlowField::getVelocity()
 [109] createLimits(Parameters&, _p_DM*&, int*, int*, int*) [27] MovingWallVelocityStencil::applyFrontWall(FlowField&, int, int, int) [45] FlowField::getPressureAndVelocity(double&, double*, int, int, int)
  [85] broadcastString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, ompi_communicator_t* const&, int) [28] MovingWallVelocityStencil::applyRightWall(FlowField&, int, int, int) [11] FlowField::getFGH()
   [7] computeMatrix3D(_p_KSP*, _p_Mat*, _p_Mat*, void*) [26] MovingWallVelocityStencil::applyBottomWall(FlowField&, int, int, int) [56] FlowField::getRHS()
  [80] readStringMandatory(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, tinyxml2::XMLElement*) [121] MovingWallVelocityStencil::MovingWallVelocityStencil(Parameters const&) [18] FlowField::getFlags()
  [79] readWall(tinyxml2::XMLElement*, double*, double&) [122] MovingWallVelocityStencil::~MovingWallVelocityStencil() [9] UniformMeshsize::getDx(int, int, int) const
   [3] FGHStencil::apply(FlowField&, int, int, int) [123] NeumannFGHBoundaryStencil::NeumannFGHBoundaryStencil(Parameters const&) [19] UniformMeshsize::getDy(int, int) const
   [4] RHSStencil::apply(FlowField&, int, int, int) [124] NeumannFGHBoundaryStencil::~NeumannFGHBoundaryStencil() [8] UniformMeshsize::getDy(int, int, int) const
  [31] VTKStencil::writeHeaderAndCoords() [125] PeriodicBoundaryFGHStencil::PeriodicBoundaryFGHStencil(Parameters const&) [12] UniformMeshsize::getDz(int, int, int) const
  [44] VTKStencil::apply(FlowField&, int, int, int) [126] PeriodicBoundaryFGHStencil::~PeriodicBoundaryFGHStencil() [57] UniformMeshsize::getPosX(int, int, int) const
  [86] VTKStencil::openFile(int) [127] PetscParallelConfiguration::computeSizes() [58] UniformMeshsize::getPosY(int, int, int) const
  [15] MaxUStencil::apply(FlowField&, int, int, int) [128] PetscParallelConfiguration::locateNeighbors() [60] UniformMeshsize::getPosZ(int, int, int) const
 [110] PetscSolver::reInitMatrix() [129] NeumannVelocityBoundaryStencil::NeumannVelocityBoundaryStencil(Parameters const&) [70] tinyxml2::XMLElement::FindAttribute(char const*) const
  [25] PetscSolver::solve()  [130] NeumannVelocityBoundaryStencil::~NeumannVelocityBoundaryStencil() [77] tinyxml2::XMLElement::GetText() const
  [16] ScalarField::getScalar(int, int, int) [131] PeriodicBoundaryVelocityStencil::PeriodicBoundaryVelocityStencil(Parameters const&) [78] tinyxml2::XMLAttribute::QueryIntValue(int*) const
  [24] ScalarField::ScalarField(int, int, int) [132] PeriodicBoundaryVelocityStencil::~PeriodicBoundaryVelocityStencil() [73] tinyxml2::XMLAttribute::QueryDoubleValue(double*) const
   [6] VectorField::getVector(int, int, int) [65] tinyxml2::XMLElement::ParseAttributes(char*) [64] tinyxml2::XMLNode::FirstChildElement(char const*) const
  [20] VectorField::VectorField(int, int, int) [66] tinyxml2::XMLElement::ParseDeep(char*, tinyxml2::StrPair*) [76] tinyxml2::XMLText::ToText() const
 [111] LinearSolver::LinearSolver(FlowField&, Parameters const&) [61] tinyxml2::XMLElement::ToElement() [30] FlowField::getCellsX() const
   [1] FieldIterator<FlowField>::iterate() [67] tinyxml2::XMLElement::~XMLElement() [29] FlowField::getCellsY() const
  [34] IntScalarField::initialize() [63] tinyxml2::XMLDocument::Identify(char*, tinyxml2::XMLNode**) [55] FlowField::getCellsZ() const
